package com.pandy.web.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;
import com.pandy.domain.Category;
import com.pandy.domain.PageBean;
import com.pandy.domain.Product;
import com.pandy.service.ProductService;
import com.pandy.utils.JedisPoolUtils;

import redis.clients.jedis.Jedis;

/**
 * Servlet implementation class ProductServlet
 * 商品模块  功能通过方法分开
 */
public class ProductServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ProductServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
		//获得请求的那个方法的method
		String methodName = request.getParameter("method");
		if("productList".equals(methodName)) {
			productList(request,response);
		}else if("categoryList".equals(methodName)) {
			categoryList(request,response);
		}else if("index".equals(methodName)) {
			index(request,response);
		}else if("productInfo".equals(methodName)) {
			productInfo(request,response);
		}
	}
	
	
	
	//模块中的功能按照方法区分
	//显示商品的类别的功能
	protected void categoryList(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		ProductService service = new ProductService();
		
		//先从缓存中查询categoryList 如果有直接使用 如果没有则从数据库中查询
		Jedis jedis = JedisPoolUtils.getJedis();
		String categoryListJson = jedis.get("categoryListJson");
		//判断categoryListJson是否为空
		if(categoryListJson==null) {
			System.out.println("缓存中没有数据查询数据库");
			//缓存中没有从数据库中查询
			List<Category> categoryList = service.findAllCategory();
			Gson gson = new Gson();
			categoryListJson = gson.toJson(categoryList);
			jedis.set("categoryListJson", categoryListJson);
		}
		
        //request.setAttribute("categoryList", categoryList);
        response.setContentType("text/html;charset=utf8");
        response.getWriter().write(categoryListJson);
	}
	
	//显示首页的功能
	protected void index(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
		ProductService service = new ProductService();
		//准备热门商品 List<Product>
		List<Product> hotProductList =  service.findHotProductList();
		
		//准备最新商品
		List<Product> newProductList =  service.findNewProductList();
		
		//准备分类数据
		//List<Category> categoryList = service.findAllCategory();
		//将获取到的值放进request域  然后转发给index.jsp
		request.setAttribute("hotProductList", hotProductList);
		request.setAttribute("newProductList", newProductList);
		
		//注意菜单在header.jsp中
		
		//注意  使用foreach语句中的el表达式取值的时候  需要进行下面的书写
		//request.setAttribute("categoryList", categoryList);
		
		//
		request.getRequestDispatcher("/index.jsp").forward(request, response);
	}
	//商品的详细信息
	protected void productInfo(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
		
		//获得当前页
		String currentPage = request.getParameter("currentPage");
		
		//获得商品类别
		String cid= request.getParameter("cid");
		
		//获得当前要查询商品的pid
		String pid = request.getParameter("pid");
		ProductService service = new ProductService();
		Product product = service.findProductByPid(pid);
		request.setAttribute("product", product);
		
		
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("cid", cid);
		
		//获得客户端携带的cookie---获得名字是pids的cookie
		String pids = pid;
		Cookie[] cookies = request.getCookies();
		if(cookies!=null) {
			for(Cookie cookie : cookies) {
				if("pids".equals(cookie.getName())) {
					pids = cookie.getValue();
					//将pids拆成一个数组
					String[] split = pids.split("-");
					List<String> asList = Arrays.asList(split);
					LinkedList list = new LinkedList<String>(asList);
					//判断集合中是否存在当前的cid
					if(list.contains(pid)) {
						//包含当前查看商品的pid
						list.remove(pid);
						list.addFirst(pid);
					}else {
						//不包含pid 直接将该pid放在最上面
						list.addFirst(pid);
					}
					//将[x,y,z]转成字符串
					StringBuffer sb = new StringBuffer();
					for(int i=0;i<list.size()&&i<7;i++) {
						sb.append(list.get(i));
						sb.append("-");//[x-y-z]
					}
					//去掉最后面的-
					pids = sb.substring(0,sb.length()-1);
					
				}
			}
		}
		Cookie cookie_pids = new Cookie("pids",pids);
		response.addCookie(cookie_pids);
		
		//当转发之前 创建cookie存储pid
		
		
		//已经有带值跳转到相关的页面
		request.getRequestDispatcher("/product_info.jsp").forward(request,response);
	}
	
	//根据商品类别获取列表
	protected void productList(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
		//获得cid
		String cid= request.getParameter("cid");
		
		String currentPageStr = request.getParameter("currentPage");
		if(currentPageStr==null) {
			currentPageStr ="1";
		}
		int currentPage =Integer.parseInt(currentPageStr);
		int currentCount = 12;
		
		ProductService service = new ProductService();
		PageBean pageBean =  service.findProductListByCid(cid,currentPage,currentCount);
		
		request.setAttribute("pageBean", pageBean);
		request.setAttribute("cid", cid);
		
		//记录一个历史商品信息的集合
		List<Product> historyProductList = new ArrayList<Product>();
		//获得客户端携带名字叫pids的cookie
		Cookie[] cookies = request.getCookies();
		if(cookies!=null) {
			for(Cookie cookie:cookies) {
				if("pids".equals(cookie.getName())) {
					String pids = cookie.getValue();
					String[] split = pids.split("-");
					for(String pid:split) {
						Product pro = service.findProductByPid(pid);
						historyProductList.add(pro);
					}
				}
			}
		}
		//将历史记录的几个放进域中
		request.setAttribute("historyProductList", historyProductList);
		
		
		request.getRequestDispatcher("/product_list.jsp").forward(request, response);
	}
	
	//
	
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
